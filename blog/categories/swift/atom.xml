<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | I Vector]]></title>
  <link href="http://anyetiangong.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://anyetiangong.github.io/"/>
  <updated>2015-10-16T12:41:23+08:00</updated>
  <id>http://anyetiangong.github.io/</id>
  <author>
    <name><![CDATA[Vector Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift2基本语法-变量、常量与控制流]]></title>
    <link href="http://anyetiangong.github.io/blog/2015/10/14/swift2-basic-value-and-control/"/>
    <updated>2015-10-14T14:46:53+08:00</updated>
    <id>http://anyetiangong.github.io/blog/2015/10/14/swift2-basic-value-and-control</id>
    <content type="html"><![CDATA[<h3>常量与变量</h3>

<ul>
<li><code>let</code>指定常亮，<code>var</code>指定变量。</li>
<li>编译器会自动推断对象的类型，也可以自己指定 <code>let anExplicitInteger : Int = 2</code></li>
<li>定义常量和变量的时候必须指定值。如果希望某一个变量在某个时刻为<code>nil</code>，需要使用<code>？</code>，此时该变量称为一个可选标量。只有可选变量才允许被设置为 nil！</li>
</ul>


<pre><code class="swift">var aNoneOpt: Int?
aNoneOpt = 33
aNoneOpt = nil
</code></pre>

<p>对于可选变量，可以进行拆包（unwrap）操作，获得其取值。这一工作用 ! 字符实现。<strong>请注意</strong>，如果对一个可选变量进行拆包，而它并没有值，程序将会抛出一个 运行时错误，并会崩溃：</p>

<pre><code class="swift">var abc = 1 + aNoneOpt!
</code></pre>

<p>如果不希望在每次用到可选变量时都要对其进行拆包，可以将它们声明为已拆包的.这样就可以直接使用它们的值，但可能会不安全。请谨慎使用。</p>

<pre><code class="swift">var aNoneOpt: Int!
</code></pre>

<p>可以使用()在字符串列表中引用变量
<code>swift
let myNumber = 3
let myString = "My number is \(myNumber + 1)"
</code></p>

<h3>容器</h3>

<ul>
<li>元组</li>
</ul>


<pre><code class="swift">let aTuple = (1, "YES")
let theNumber = aTuple.0
let anotherTuple = (aNumber: 1, aString: "YES")  //给元组的值添加标签
let theOtherNumber = anotherTuple.aNumber
</code></pre>

<ul>
<li>数组</li>
</ul>


<pre><code class="swift   ">// array
var myArray = [1, 2, 3]
myArray.append(4)
myArray.insert(5, atIndex: 0)  //可以在数组任意位置插入变量，不能超过边界
myArray.removeAtIndex(4)
myArray.reverse()   //颠倒排序
myArray.count   //数组元素数目
let arrayOfIntegers: [Int] = [1, 2, 3]  //使用let创建的数组内容不可变
let implicitArrayOfIntegers = [2, 3, 4] //自动推断
let anotherArray = [Int]()  //创建空数组的时候需要提供类型
</code></pre>

<ul>
<li>字典
字典是一种将键映射到指的类型
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">crew</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Caption</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Jean</span><span class="o">-</span><span class="n">Luc</span> <span class="n">Picard</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">First</span> <span class="n">officer</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">William</span> <span class="n">Riker</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Second</span> <span class="n">Officer</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Data</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="n">crew</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Caption</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="c1">//通过键值获取数据</span>
</span><span class='line'><span class="n">crew</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Intern</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Wesley</span> <span class="n">Crusher</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>   <span class="c1">//添加新的键对&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">var</span> <span class="n">aNumberdictionary</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">:</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">aNumberdictionary</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">=</span> <span class="mi">23</span>  <span class="c1">//字典的键和值都可以其他类型</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>控制流</h3>

<p>Swift中不需要将if for while等需要的判断条件放到括号中。但是执行语句必须放入大括号中，哪怕只有一句。</p>

<ol>
<li>for &hellip; in &hellip;
对项目集合进行遍历，不需要指定类型。可以用来迭代一个数值的范围：
<code>swift
var firstCounter = 0
for index in 1 ..&lt; 10 {
 firstCounter++
}
</code></li>
<li>if let
即是赋值又是判断。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">1.</span> <span class="k">switch</span>
</span><span class='line'>    <span class="err">可以对数字，字符串和元组进行匹配，也可以判断数字区间</span> <span class="mi">0</span> <span class="p">...</span>  <span class="mi">10</span><span class="err">。执行完一个</span><span class="k">case</span><span class="err">之后不会自动进入下一个</span><span class="k">case</span><span class="err">，不需要</span><span class="k">break</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">swift</span>
</span><span class='line'><span class="k">let</span> <span class="n">tupleSwitch</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">123</span><span class="p">)</span>
</span><span class='line'><span class="k">switch</span> <span class="n">tupleSwitch</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">123</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Tuple</span> <span class="n">contains</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">and</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">123</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">_</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Tuple</span> <span class="n">contains</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">and</span> <span class="n">something</span> <span class="k">else</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift2基本语法-变量、常量与控制流]]></title>
    <link href="http://anyetiangong.github.io/blog/2015/10/14/swift2-basic/"/>
    <updated>2015-10-14T14:46:53+08:00</updated>
    <id>http://anyetiangong.github.io/blog/2015/10/14/swift2-basic</id>
    <content type="html"><![CDATA[<h3>常量与变量</h3>

<ul>
<li><code>let</code>指定常亮，<code>var</code>指定变量。</li>
<li>编译器会自动推断对象的类型，也可以自己指定 <code>let anExplicitInteger : Int = 2</code></li>
<li>定义常量和变量的时候必须指定值。如果希望某一个变量在某个时刻为<code>nil</code>，需要使用<code>？</code>，此时该变量称为一个可选标量。只有可选变量才允许被设置为 nil！</li>
</ul>


<pre><code class="swift">var aNoneOpt: Int?
aNoneOpt = 33
aNoneOpt = nil
</code></pre>

<p>对于可选变量，可以进行拆包（unwrap）操作，获得其取值。这一工作用 ! 字符实现。<strong>请注意</strong>，如果对一个可选变量进行拆包，而它并没有值，程序将会抛出一个 运行时错误，并会崩溃：</p>

<pre><code class="swift">var abc = 1 + aNoneOpt!
</code></pre>

<p>如果不希望在每次用到可选变量时都要对其进行拆包，可以将它们声明为已拆包的.这样就可以直接使用它们的值，但可能会不安全。请谨慎使用。</p>

<pre><code class="swift">var aNoneOpt: Int!
</code></pre>

<p>可以使用()在字符串列表中引用变量
<code>swift
let myNumber = 3
let myString = "My number is \(myNumber + 1)"
</code></p>

<h3>容器</h3>

<ul>
<li>元组</li>
</ul>


<pre><code class="swift">let aTuple = (1, "YES")
let theNumber = aTuple.0
let anotherTuple = (aNumber: 1, aString: "YES")  //给元组的值添加标签
let theOtherNumber = anotherTuple.aNumber
</code></pre>

<ul>
<li>数组</li>
</ul>


<pre><code class="swift   ">// array
var myArray = [1, 2, 3]
myArray.append(4)
myArray.insert(5, atIndex: 0)  //可以在数组任意位置插入变量，不能超过边界
myArray.removeAtIndex(4)
myArray.reverse()   //颠倒排序
myArray.count   //数组元素数目
let arrayOfIntegers: [Int] = [1, 2, 3]  //使用let创建的数组内容不可变
let implicitArrayOfIntegers = [2, 3, 4] //自动推断
let anotherArray = [Int]()  //创建空数组的时候需要提供类型
</code></pre>

<ul>
<li>字典
字典是一种将键映射到指的类型
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">crew</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Caption</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Jean</span><span class="o">-</span><span class="n">Luc</span> <span class="n">Picard</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">First</span> <span class="n">officer</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">William</span> <span class="n">Riker</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Second</span> <span class="n">Officer</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Data</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="n">crew</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Caption</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="c1">//通过键值获取数据</span>
</span><span class='line'><span class="n">crew</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Intern</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Wesley</span> <span class="n">Crusher</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>   <span class="c1">//添加新的键对&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">var</span> <span class="n">aNumberdictionary</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">:</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="n">aNumberdictionary</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">=</span> <span class="mi">23</span>  <span class="c1">//字典的键和值都可以其他类型</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>控制流</h3>

<p>Swift中不需要将if for while等需要的判断条件放到括号中。但是执行语句必须放入大括号中，哪怕只有一句。</p>

<ol>
<li>for &hellip; in &hellip;
对项目集合进行遍历，不需要指定类型。可以用来迭代一个数值的范围：
<code>swift
var firstCounter = 0
for index in 1 ..&lt; 10 {
 firstCounter++
}
</code></li>
<li>if let
即是赋值又是判断。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">1.</span> <span class="k">switch</span>
</span><span class='line'>    <span class="err">可以对数字，字符串和元组进行匹配，也可以判断数字区间</span> <span class="mi">0</span> <span class="p">...</span>  <span class="mi">10</span><span class="err">。执行完一个</span><span class="k">case</span><span class="err">之后不会自动进入下一个</span><span class="k">case</span><span class="err">，不需要</span><span class="k">break</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">swift</span>
</span><span class='line'><span class="k">let</span> <span class="n">tupleSwitch</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">123</span><span class="p">)</span>
</span><span class='line'><span class="k">switch</span> <span class="n">tupleSwitch</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">123</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Tuple</span> <span class="n">contains</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">and</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">123</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">_</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Tuple</span> <span class="n">contains</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Yes</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">and</span> <span class="n">something</span> <span class="k">else</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
