<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I Vector]]></title>
  <link href="http://anyetiangong.github.io/atom.xml" rel="self"/>
  <link href="http://anyetiangong.github.io/"/>
  <updated>2015-10-23T10:44:50+08:00</updated>
  <id>http://anyetiangong.github.io/</id>
  <author>
    <name><![CDATA[Vector Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode7网络操作提示NSURLErrorDomain]]></title>
    <link href="http://anyetiangong.github.io/blog/2015/10/23/xcode7-network-access-domain-error/"/>
    <updated>2015-10-23T10:35:45+08:00</updated>
    <id>http://anyetiangong.github.io/blog/2015/10/23/xcode7-network-access-domain-error</id>
    <content type="html"><![CDATA[<p>从iOS 9 和 OSX 10.11开始苹果要求网络操作使用Https请求</p>

<blockquote><p>App Transport Security (ATS) lets an app add a declaration to its Info.plist file that specifies the domains with which it needs secure communication. ATS prevents accidental disclosure, provides secure default behavior, and is easy to adopt. You should adopt ATS as soon as possible, regardless of whether you’re creating a new app or updating an existing one.</p>

<p>If you’re developing a new app, you should use HTTPS exclusively. If you have an existing app, you should use HTTPS as much as you can right now, and create a plan for migrating the rest of your app as soon as possible.</p></blockquote>

<p>对于默认的网络操作会提示Xcode7网络操作提示NSURLErrorDomain。</p>

<p>一个解决办法：修改info.plist文件。</p>

<ol>
<li>在Info.plist中添加NSAppTransportSecurity类型Dictionary。</li>
<li>在NSAppTransportSecurity下添加NSAllowsArbitraryLoads类型Boolean,值设为YES</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift基础：变量的创建和使用]]></title>
    <link href="http://anyetiangong.github.io/blog/2015/10/22/swift-base-value-create-and-use/"/>
    <updated>2015-10-22T12:39:12+08:00</updated>
    <id>http://anyetiangong.github.io/blog/2015/10/22/swift-base-value-create-and-use</id>
    <content type="html"><![CDATA[<p>创建变量时不需要指定类型，swift可以对类型进行推断。但是赋值之后，不能再改变变量的类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;Hello, playground&quot;</span>
</span><span class='line'><span class="k">var</span> <span class="n">intValue</span> <span class="o">=</span> <span class="mi">343</span>
</span><span class='line'><span class="c1">//intValue = &quot;efjiwe&quot;   //不允许改变变量类型</span>
</span></code></pre></td></tr></table></div></figure>


<p>非可选变量不允许被设置为nil，使用之前必须进行初始化</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//var nilValue = nil    //非可选变量不允许被设置为nil</span>
</span><span class='line'><span class="k">var</span> <span class="nl">anotherIntValue</span><span class="p">:</span> <span class="n">Int</span>    <span class="c1">//创建变量时可以不赋值，此时需要指定变量类型</span>
</span><span class='line'><span class="c1">//var result = anotherIntValue + 3    //不能直接使用没有赋值的变量</span>
</span><span class='line'><span class="n">anotherIntValue</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="k">var</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">anotherIntValue</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>可选变量通过Type？或Type！来创建，允许设置为nil。如果没有声明为已拆包的类型，在使用时需要进行拆包</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">optionValue</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>    <span class="c1">//通过 Type？来创建可选变量</span>
</span><span class='line'><span class="n">optionValue</span> <span class="o">=</span> <span class="nb">nil</span>        <span class="c1">//可选变量可以设置为nil</span>
</span><span class='line'><span class="c1">//var anotherResult = optionValue! + 4  //使用可选变量的时候需要拆包，如果拆包返回nil，停止运行</span>
</span><span class='line'><span class="n">optionValue</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="k">var</span> <span class="n">anotherResult</span> <span class="o">=</span> <span class="n">optionValue</span><span class="o">!</span> <span class="o">+</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">unWrapedValue</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span>     <span class="c1">//通过 Type！创建已拆包的可选变量</span>
</span><span class='line'><span class="n">unWrapedValue</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">anotherResult</span> <span class="o">=</span> <span class="n">unWrapedValue</span> <span class="o">+</span> <span class="mi">3</span>   <span class="c1">//使用时不需要再次拆包，但仍有可能出错</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法测试]]></title>
    <link href="http://anyetiangong.github.io/blog/2015/10/14/markdown-syntax-test/"/>
    <updated>2015-10-14T14:24:08+08:00</updated>
    <id>http://anyetiangong.github.io/blog/2015/10/14/markdown-syntax-test</id>
    <content type="html"><![CDATA[<p><a href="http://sourceforge.net/p/jekyllc/bugs/markdown_syntax">Test Markdown syntax from jekyllc markdonw syntax</a></p>

<h3>Links</h3>

<p>Most URLs will automatically be turned into links. To be explicit, just write it like this:
<a href="http://someurl">http://someurl</a></p>

<p><a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#x73;&#111;&#109;&#x65;&#98;&#98;&#x6f;&#98;&#64;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;">&#115;&#x6f;&#x6d;&#101;&#x62;&#x62;&#111;&#98;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;</a></p>

<p>To use text for the link, write it:
<a href="http://someurl">like this</a></p>

<p>You can add a <em>title</em> (which shows up under the cursor):
<a href="http://someurl" title="this title shows up when you hover">like this</a></p>

<h3>Reference Links</h3>

<p>You can also put the <a href="http://url">link URL</a> below the current paragraph
like <a href="http://another.url" title="A funky title">this</a>.</p>

<p>You can also put the link URL below the current paragraph
like this.
Here the text &ldquo;link URL&rdquo; gets linked to &ldquo;<a href="http://url">http://url</a>&rdquo;, and the lines showing &ldquo;<a href="http://url">1</a>: <a href="http://url">http://url</a>&rdquo; won&rsquo;t show anything.
Or you can use a <a href="http://goes/with/the/link/name/text">shortcut</a> reference, which links the text &ldquo;shortcut&rdquo; to the link named &ldquo;<a href="http://goes/with/the/link/name/text">shortcut</a>&rdquo; on the next paragraph.
Or you can use a <a href="http://goes/with/the/link/name/text">shortcut</a> reference, which links the text
&ldquo;shortcut&rdquo; to the link named &ldquo;<a href="http://goes/with/the/link/name/text">shortcut</a>&rdquo; on the next paragraph.</p>

<h3>Basic Text Formatting</h3>

<p>Use * or _ to emphasize things:
<em>this is in italic</em>  and <em>so is this</em></p>

<p><strong>this is in bold</strong>  and <strong>so is this</strong></p>

<p><strong><em>this is bold and italic</em></strong>  and <strong><em>so is this</em></strong></p>

<p>You can strike through text using HTML like this:
<s>this is strike through text</s></p>

<p>A carriage return
makes a line break.</p>

<p>Two carriage returns make a new paragraph.</p>

<h3>Blockquotes</h3>

<p>Use the > character in front of a line, just like in email</p>

<blockquote><p>Use it if you&rsquo;re quoting a person, a song or whatever.</p>

<p>You can use <em>italic</em> or lists inside them also.
And just like with other paragraphs,
all of these lines are still
part of the blockquote, even without the > character in front.</p></blockquote>

<p>To end the blockquote, just put a blank line before the following
paragraph.</p>

<p>Preformatted Text
If you want some text to show up exactly as you write it, without Markdown doing anything to it, just indent every line by at least 4 spaces (or 1 tab). As an alternative to indenting, you can use 4 or more tildes before and after the text. See examples in the Code Highlighting section
    This line won&rsquo;t <em>have any markdown</em> formatting applied.
    I can even write <b>HTML</b> and it will show up as text.
    This is great for showing program source code, or HTML or even
    Markdown. <b>this won&rsquo;t show up as HTML</b> but
    exactly <i>as you see it in this text file</i>.</p>

<p>Within a paragraph, you can use backquotes to do the same thing.
<code>This won't be *italic* or **bold** at all.</code></p>

<h3>Lists</h3>

<ul>
<li>an asterisk starts an unordered list</li>
<li>and this is another item in the list</li>
<li>or you can also use the + character</li>
<li>or the - character</li>
</ul>


<p>To start an ordered list, write this:</p>

<ol>
<li>this starts a list <em>with</em> numbers</li>
<li>this will show as number &ldquo;2&rdquo;</li>
<li>this will show as number &ldquo;3.&rdquo;</li>
<li>any number, +, -, or * will keep the list going.

<ul>
<li>just indent by 4 spaces (or tab) to make a sub-list

<ol>
<li>keep indenting for more sub lists</li>
</ol>
</li>
<li>here i&rsquo;m back to the second level</li>
</ul>
</li>
</ol>


<h3>Tables</h3>

<p>You can create tables using pipes and dashes like this:</p>

<table>
<thead>
<tr>
<th>First Header  </th>
<th> Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell  </td>
<td> Content Cell</td>
</tr>
<tr>
<td>Content Cell  </td>
<td> Content Cell</td>
</tr>
</tbody>
</table>


<p>You can use markdown syntax within table cells for formatting:</p>

<table>
<thead>
<tr>
<th>First Header   </th>
<th> Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Content Cell</em> </td>
<td> Content Cell</td>
</tr>
<tr>
<td>Content Cell   </td>
<td> Content Cell</td>
</tr>
</tbody>
</table>


<h3>Headers</h3>

<p>Just put 1 or more dashes or equals signs (&mdash; or ===) below the title.</p>

<h1>This is a huge header</h1>

<h2>this is a smaller header</h2>

<h3>Horizontal Rule</h3>

<h2>Just put three or more *&rsquo;s or -&rsquo;s on a line:</h2>

<p>Or, you can use single spaces between then, like this:</p>

<hr />

<p>or</p>

<hr />

<p>Make sure you have a blank line above the dashes, though, or else:</p>

<h2>you will get a header</h2>

<h3>Images</h3>

<p>To include an image, just put a &ldquo;!&rdquo; in front of a text link:
<img src="https://sourceforge.net/images/icon_linux.gif" alt="alternate text" /></p>

<p>The &ldquo;alternate text&rdquo; will show up if the browser can&rsquo;t load the image.
You can also use a title if you want, like this:
<img src="https://sourceforge.net/images/icon_linux.gif" title="tiny arrow" alt="tiny arrow" /></p>

<h3>More Headers</h3>

<p>More ways of doing headers:</p>

<h1>this is a huge header</h1>

<h2>this is a smaller header</h2>

<h3>this is even smaller</h3>

<h4>more small</h4>

<h5>even smaller</h5>

<h6>smallest still: <code>&lt;h6&gt;</code> header</h6>
]]></content>
  </entry>
  
</feed>
